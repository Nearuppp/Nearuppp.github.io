2:I[168,["671","static/chunks/671-870bf4da9bc73117.js","242","static/chunks/app/knowledge-hub/%5Bslug%5D/page-a57df3892695a452.js"],"default"]
3:I[2972,["671","static/chunks/671-870bf4da9bc73117.js","242","static/chunks/app/knowledge-hub/%5Bslug%5D/page-a57df3892695a452.js"],""]
4:I[4707,[],""]
6:I[6423,[],""]
7:I[2798,["185","static/chunks/app/layout-23fdfd89875a333b.js"],"ThemeProvider"]
5:["slug","language-c-rappel-md","d"]
0:["OndCkgYiz6_LrGL1nuWc2",[[["",{"children":["knowledge-hub",{"children":[["slug","language-c-rappel-md","d"],{"children":["__PAGE__?{\"slug\":\"language-c-rappel-md\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["knowledge-hub",{"children":[["slug","language-c-rappel-md","d"],{"children":["__PAGE__",{},[["$L1",["$","main",null,{"className":"min-h-screen bg-background","children":[["$","$L2",null,{}],["$","article",null,{"className":"py-20 pt-32","children":["$","div",null,{"className":"container mx-auto px-4 max-w-4xl","children":[["$","div",null,{"className":"mb-8","children":["$","$L3",null,{"href":"/knowledge-hub/","children":["$","button",null,{"className":"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 hover:bg-accent hover:text-accent-foreground h-10 px-4 py-2 gap-2","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-arrow-left h-4 w-4","children":[["$","path","1l729n",{"d":"m12 19-7-7 7-7"}],["$","path","x3x0zl",{"d":"M19 12H5"}],"$undefined"]}],"Back to Knowledge Hub"]}]}]}],["$","div",null,{"className":"bg-card p-8 rounded-lg shadow-sm","children":[["$","div",null,{"className":"mb-6","children":[["$","h1",null,{"className":"text-3xl font-bold mb-4","children":"C Language Quick Reference for LeetCode Beginners"}],["$","div",null,{"className":"flex items-center gap-2 text-muted-foreground mb-4","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-calendar h-4 w-4","children":[["$","path","1cmpym",{"d":"M8 2v4"}],["$","path","4m81vk",{"d":"M16 2v4"}],["$","rect","1hopcy",{"width":"18","height":"18","x":"3","y":"4","rx":"2"}],["$","path","8toen8",{"d":"M3 10h18"}],"$undefined"]}],["$","span",null,{"children":"2025-07-29"}]]}],["$","div",null,{"className":"flex flex-wrap gap-2 mb-6","children":[["$","$L3","C",{"href":"/tags/C/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"C"]}]}],["$","$L3","Programming",{"href":"/tags/Programming/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Programming"]}]}],["$","$L3","LeetCode",{"href":"/tags/LeetCode/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"LeetCode"]}]}],["$","$L3","Algorithms",{"href":"/tags/Algorithms/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Algorithms"]}]}],["$","$L3","Data",{"href":"/tags/Data/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Data"]}]}],["$","$L3","Structures",{"href":"/tags/Structures/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Structures"]}]}],["$","$L3","Beginner",{"href":"/tags/Beginner/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"Beginner"]}]}],["$","$L3","French",{"href":"/tags/French/","children":["$","div",null,{"className":"rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 text-foreground flex items-center gap-1 hover:bg-primary/10 cursor-pointer","children":[["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-tag h-3 w-3","children":[["$","path","vktsd0",{"d":"M12.586 2.586A2 2 0 0 0 11.172 2H4a2 2 0 0 0-2 2v7.172a2 2 0 0 0 .586 1.414l8.704 8.704a2.426 2.426 0 0 0 3.42 0l6.58-6.58a2.426 2.426 0 0 0 0-3.42z"}],["$","circle","kqv944",{"cx":"7.5","cy":"7.5","r":".5","fill":"currentColor"}],"$undefined"]}],"French"]}]}]]}],["$","div",null,{"className":"bg-muted/30 p-4 rounded-lg mb-6","children":["$","p",null,{"className":"italic","children":"Comprehensive C programming guide tailored for beginners practicing LeetCode problems, including arrays, pointers, linked lists, trees, recursion, sorting, dynamic programming, and more."}]}]]}],["$","div",null,{"className":"markdown max-w-none","children":[["$","p","p-0",{"children":"Pour declarer un tableau :"}],"\n",["$","pre","pre-0",{"children":["$","code","code-0",{"className":"language-c","children":"char tableau[] = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};\n"}]}],"\n",["$","p","p-1",{"children":"Prendre le premier charactere d'une chaine de charactere :"}],"\n",["$","h3","h3-0",{"children":["Chaîne sous forme de pointeur (",["$","code","code-0",{"children":"char *"}],")"]}],"\n",["$","pre","pre-1",{"children":["$","code","code-0",{"className":"language-C","children":"char *s = \"bonjour\";\n\nchar premier = *s;     // OK : donne 'b'\nchar aussiPremier = s[0]; // OK : donne aussi 'b'\n"}]}],"\n",["$","h3","h3-1",{"children":["Chaîne sous forme de tableau (",["$","code","code-0",{"children":"char[]"}],")"]}],"\n",["$","pre","pre-2",{"children":["$","code","code-0",{"className":"language-C","children":"char tableau[] = \"bonjour\";\n\nchar premier = *tableau;   // OK : donne 'b'\nchar aussiPremier = tableau[0]; // OK : donne aussi 'b'\n"}]}],"\n",["$","p","p-2",{"children":["Great! I’ll create a C language note tailored for a beginner focused on solving LeetCode problems. It will include syntax reminders and code templates for common algorithms and data structures like arrays, linked lists, trees, recursion, dynamic programming, and more.",["$","br","br-0",{}],"\nI'll let you know once it's ready for you to review and use."]}],"\n",["$","h1","h1-0",{"children":"C Quick Reference for LeetCode"}],"\n",["$","h2","h2-0",{"children":"Basic Input/Output"}],"\n",["$","p","p-3",{"children":["$","strong","strong-0",{"children":"Template: Reading and Printing an Integer"}]}],"\n",["$","pre","pre-3",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nint main() {\n    int x;\n    scanf(\"%d\", &x);\n    printf(\"%d\\n\", x);\n    return 0;\n}\n"}]}],"\n",["$","p","p-4",{"children":["$","strong","strong-0",{"children":"Template: Reading a String and Printing"}]}],"\n",["$","pre","pre-4",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nint main() {\n    char str[100];\n    scanf(\"%99s\", str);\n    printf(\"%s\\n\", str);\n    return 0;\n}\n"}]}],"\n",["$","h2","h2-1",{"children":"Arrays and Strings"}],"\n",["$","p","p-5",{"children":["$","strong","strong-0",{"children":"Template: Array Declaration and Traversal"}]}],"\n",["$","pre","pre-5",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n    int n = 5;\n    for(int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n    printf(\"\\n\");\n    return 0;\n}\n"}]}],"\n",["$","p","p-6",{"children":["$","strong","strong-0",{"children":"Template: String Declaration and Functions"}]}],"\n",["$","pre","pre-6",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\n#include <string.h>\nint main() {\n    char s[100] = \"hello\";\n    int len = strlen(s);\n    char t[100];\n    strcpy(t, s);\n    strcat(s, \" world\");\n    printf(\"%s (len=%d)\\n\", s, len);\n    return 0;\n}\n"}]}],"\n",["$","h2","h2-2",{"children":"Pointers and Memory Management"}],"\n",["$","p","p-7",{"children":["$","strong","strong-0",{"children":"Template: Pointer and malloc"}]}],"\n",["$","pre","pre-7",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\n#include <stdlib.h>\nint main() {\n    int *p = malloc(sizeof(int));\n    if (p == NULL) return 1;\n    *p = 10;\n    printf(\"%d\\n\", *p);\n    free(p);\n    return 0;\n}\n"}]}],"\n",["$","p","p-8",{"children":["$","strong","strong-0",{"children":"Template: Pointer to Array"}]}],"\n",["$","pre","pre-8",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nint main() {\n    int arr[5] = {10, 20, 30, 40, 50};\n    int *p = arr;\n    printf(\"%d\\n\", *(p+2)); // prints arr[2]\n    return 0;\n}\n"}]}],"\n",["$","h2","h2-3",{"children":"Linked Lists (Singly and Doubly)"}],"\n",["$","p","p-9",{"children":["$","strong","strong-0",{"children":"Template: Singly Linked List Node & Insert at Head"}]}],"\n",["$","pre","pre-9",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdlib.h>\ntypedef struct ListNode {\n    int val;\n    struct ListNode *next;\n} ListNode;\n\nListNode* insertAtHead(ListNode* head, int val) {\n    ListNode* newNode = malloc(sizeof(ListNode));\n    newNode->val = val;\n    newNode->next = head;\n    return newNode;\n}\n"}]}],"\n",["$","p","p-10",{"children":["$","strong","strong-0",{"children":"Template: Doubly Linked List Node & Insert at Head"}]}],"\n",["$","pre","pre-10",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdlib.h>\ntypedef struct DListNode {\n    int val;\n    struct DListNode *prev, *next;\n} DListNode;\n\nDListNode* insertDoubly(DListNode* head, int val) {\n    DListNode* newNode = malloc(sizeof(DListNode));\n    newNode->val = val;\n    newNode->prev = NULL;\n    newNode->next = head;\n    if (head) head->prev = newNode;\n    return newNode;\n}\n"}]}],"\n",["$","h2","h2-4",{"children":"Binary Trees and Tree Traversal"}],"\n",["$","p","p-11",{"children":["$","strong","strong-0",{"children":"Template: Binary Tree Node"}]}],"\n",["$","pre","pre-11",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdlib.h>\ntypedef struct TreeNode {\n    int val;\n    struct TreeNode *left, *right;\n} TreeNode;\n"}]}],"\n",["$","p","p-12",{"children":["$","strong","strong-0",{"children":"Template: Inorder Traversal"}]}],"\n",["$","pre","pre-12",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nvoid inorder(TreeNode* root) {\n    if (root) {\n        inorder(root->left);\n        printf(\"%d \", root->val);\n        inorder(root->right);\n    }\n}\n"}]}],"\n",["$","p","p-13",{"children":["$","strong","strong-0",{"children":"Template: Preorder Traversal"}]}],"\n",["$","pre","pre-13",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nvoid preorder(TreeNode* root) {\n    if (root) {\n        printf(\"%d \", root->val);\n        preorder(root->left);\n        preorder(root->right);\n    }\n}\n"}]}],"\n",["$","p","p-14",{"children":["$","strong","strong-0",{"children":"Template: Postorder Traversal"}]}],"\n",["$","pre","pre-14",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\nvoid postorder(TreeNode* root) {\n    if (root) {\n        postorder(root->left);\n        postorder(root->right);\n        printf(\"%d \", root->val);\n    }\n}\n"}]}],"\n",["$","p","p-15",{"children":["$","strong","strong-0",{"children":"Template: Level Order (Breadth-First) Traversal"}]}],"\n",["$","pre","pre-15",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdio.h>\n#include <stdlib.h>\n#define MAX_QUEUE 100\nTreeNode* queue[MAX_QUEUE];\nint front = 0, back = 0;\n\nvoid enqueue(TreeNode* x) { queue[back++] = x; }\nTreeNode* dequeue() { return queue[front++]; }\nint isEmpty() { return front == back; }\n\nvoid levelOrder(TreeNode* root) {\n    if (!root) return;\n    front = back = 0;\n    enqueue(root);\n    while (!isEmpty()) {\n        TreeNode* node = dequeue();\n        printf(\"%d \", node->val);\n        if (node->left) enqueue(node->left);\n        if (node->right) enqueue(node->right);\n    }\n}\n"}]}],"\n",["$","h2","h2-5",{"children":"Recursion"}],"\n",["$","p","p-16",{"children":["$","strong","strong-0",{"children":"Template: Factorial (Recursion)"}]}],"\n",["$","pre","pre-16",{"children":["$","code","code-0",{"className":"language-c","children":"int factorial(int n) {\n    if (n <= 1) return 1;\n    return n * factorial(n - 1);\n}\n"}]}],"\n",["$","p","p-17",{"children":["$","strong","strong-0",{"children":"Template: Fibonacci (Recursion)"}]}],"\n",["$","pre","pre-17",{"children":["$","code","code-0",{"className":"language-c","children":"int fib(int n) {\n    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);\n}\n"}]}],"\n",["$","h2","h2-6",{"children":"Iteration and Loops"}],"\n",["$","p","p-18",{"children":["$","strong","strong-0",{"children":"Template: For Loop"}]}],"\n",["$","pre","pre-18",{"children":["$","code","code-0",{"className":"language-c","children":"for (int i = 0; i < n; i++) {\n    // code\n}\n"}]}],"\n",["$","p","p-19",{"children":["$","strong","strong-0",{"children":"Template: While Loop"}]}],"\n",["$","pre","pre-19",{"children":["$","code","code-0",{"className":"language-c","children":"int i = 0;\nwhile (i < n) {\n    // code\n    i++;\n}\n"}]}],"\n",["$","p","p-20",{"children":["$","strong","strong-0",{"children":"Template: Do-While Loop"}]}],"\n",["$","pre","pre-20",{"children":["$","code","code-0",{"className":"language-c","children":"int i = 0;\ndo {\n    // code\n    i++;\n} while (i < n);\n"}]}],"\n",["$","h2","h2-7",{"children":"Hashing (Arrays or Structs)"}],"\n",["$","p","p-21",{"children":["$","strong","strong-0",{"children":"Template: Frequency Array (Counting)"}]}],"\n",["$","pre","pre-21",{"children":["$","code","code-0",{"className":"language-c","children":"int freq[1000] = {0};\nint x = 5;\nfreq[x]++;\n"}]}],"\n",["$","p","p-22",{"children":["$","strong","strong-0",{"children":"Template: Simple Hash Map Using Array of Struct (No Collision Handling)"}]}],"\n",["$","pre","pre-22",{"children":["$","code","code-0",{"className":"language-c","children":"#define SIZE 100\ntypedef struct {\n    int key;\n    int value;\n} Entry;\n\nEntry table[SIZE];\n\nint hash(int key) {\n    return key % SIZE;\n}\n\nvoid insert(int key, int value) {\n    int idx = hash(key);\n    table[idx].key = key;\n    table[idx].value = value;\n}\n"}]}],"\n",["$","p","p-23",{"children":["$","strong","strong-0",{"children":"Template: Hash Map Using Chaining (Linked Lists)"}]}],"\n",["$","pre","pre-23",{"children":["$","code","code-0",{"className":"language-c","children":"#define SIZE 100\ntypedef struct Node {\n    int key, value;\n    struct Node* next;\n} Node;\n\nNode* hashTable[SIZE];\n\nint hash(int key) {\n    return key % SIZE;\n}\n\nvoid insert(int key, int value) {\n    int idx = hash(key);\n    Node* newNode = malloc(sizeof(Node));\n    newNode->key = key;\n    newNode->value = value;\n    newNode->next = hashTable[idx];\n    hashTable[idx] = newNode;\n}\n"}]}],"\n",["$","h2","h2-8",{"children":"Stacks and Queues"}],"\n",["$","p","p-24",{"children":["$","strong","strong-0",{"children":"Template: Stack Using Array"}]}],"\n",["$","pre","pre-24",{"children":["$","code","code-0",{"className":"language-c","children":"#define MAX 100\nint stackArr[MAX];\nint top = -1;\n\nvoid push(int x) {\n    if (top < MAX - 1) stackArr[++top] = x;\n}\n\nint pop() {\n    if (top >= 0) return stackArr[top--];\n    return -1; // or error\n}\n"}]}],"\n",["$","p","p-25",{"children":["$","strong","strong-0",{"children":"Template: Stack Using Linked List"}]}],"\n",["$","pre","pre-25",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdlib.h>\ntypedef struct Node {\n    int val;\n    struct Node* next;\n} Node;\n\nNode* topNode = NULL;\n\nvoid push(int x) {\n    Node* newNode = malloc(sizeof(Node));\n    newNode->val = x;\n    newNode->next = topNode;\n    topNode = newNode;\n}\n\nint pop() {\n    if (!topNode) return -1;\n    Node* temp = topNode;\n    int val = temp->val;\n    topNode = topNode->next;\n    free(temp);\n    return val;\n}\n"}]}],"\n",["$","p","p-26",{"children":["$","strong","strong-0",{"children":"Template: Queue Using Array"}]}],"\n",["$","pre","pre-26",{"children":["$","code","code-0",{"className":"language-c","children":"#define MAXQ 100\nint queueArr[MAXQ];\nint frontQ = 0, backQ = 0;\n\nvoid enqueue(int x) {\n    queueArr[backQ++] = x;\n}\n\nint dequeue() {\n    if (frontQ < backQ) return queueArr[frontQ++];\n    return -1;\n}\n"}]}],"\n",["$","p","p-27",{"children":["$","strong","strong-0",{"children":"Template: Queue Using Linked List"}]}],"\n",["$","pre","pre-27",{"children":["$","code","code-0",{"className":"language-c","children":"#include <stdlib.h>\ntypedef struct NodeQ {\n    int val;\n    struct NodeQ* next;\n} NodeQ;\n\nNodeQ* head = NULL;\nNodeQ* tail = NULL;\n\nvoid enqueue(int x) {\n    NodeQ* newNode = malloc(sizeof(NodeQ));\n    newNode->val = x;\n    newNode->next = NULL;\n    if (tail) tail->next = newNode;\n    else head = newNode;\n    tail = newNode;\n}\n\nint dequeue() {\n    if (!head) return -1;\n    NodeQ* temp = head;\n    int val = temp->val;\n    head = head->next;\n    if (!head) tail = NULL;\n    free(temp);\n    return val;\n}\n"}]}],"\n",["$","h2","h2-9",{"children":"Sorting Algorithms"}],"\n",["$","p","p-28",{"children":["$","strong","strong-0",{"children":"Template: Bubble Sort"}]}],"\n",["$","pre","pre-28",{"children":["$","code","code-0",{"className":"language-c","children":"void bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}\n"}]}],"\n",["$","p","p-29",{"children":["$","strong","strong-0",{"children":"Template: Merge Sort"}]}],"\n",["$","pre","pre-29",{"children":["$","code","code-0",{"className":"language-c","children":"void merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int L[n1], R[n2];\n    for (int i = 0; i < n1; i++) L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++) R[j] = arr[m + 1 + j];\n    int i = 0, j = 0, k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) arr[k++] = L[i++];\n        else arr[k++] = R[j++];\n    }\n    while (i < n1) arr[k++] = L[i++];\n    while (j < n2) arr[k++] = R[j++];\n}\n\nvoid mergeSort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n        mergeSort(arr, l, m);\n        mergeSort(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n}\n"}]}],"\n",["$","p","p-30",{"children":["$","strong","strong-0",{"children":"Template: Quick Sort"}]}],"\n",["$","pre","pre-30",{"children":["$","code","code-0",{"className":"language-c","children":"int partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i+1];\n    arr[i+1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}\n\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n"}]}],"\n",["$","h2","h2-10",{"children":"Binary Search"}],"\n",["$","p","p-31",{"children":["$","strong","strong-0",{"children":"Template: Iterative Binary Search"}]}],"\n",["$","pre","pre-31",{"children":["$","code","code-0",{"className":"language-c","children":"int binarySearch(int arr[], int n, int target) {\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) return mid;\n        else if (arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}\n"}]}],"\n",["$","p","p-32",{"children":["$","strong","strong-0",{"children":"Template: Recursive Binary Search"}]}],"\n",["$","pre","pre-32",{"children":["$","code","code-0",{"className":"language-c","children":"int binarySearchRec(int arr[], int left, int right, int target) {\n    if (left > right) return -1;\n    int mid = left + (right - left) / 2;\n    if (arr[mid] == target) return mid;\n    else if (arr[mid] < target) return binarySearchRec(arr, mid+1, right, target);\n    else return binarySearchRec(arr, left, mid-1, target);\n}\n"}]}],"\n",["$","h2","h2-11",{"children":"Sliding Window Technique"}],"\n",["$","p","p-33",{"children":["$","strong","strong-0",{"children":"Template: Fixed-Size Sliding Window (Max Sum of Size k)"}]}],"\n",["$","pre","pre-33",{"children":["$","code","code-0",{"className":"language-c","children":"int maxSumSubarray(int arr[], int n, int k) {\n    if (n < k) return 0;\n    int max_sum = 0;\n    int window_sum = 0;\n    for (int i = 0; i < k; i++) {\n        window_sum += arr[i];\n    }\n    max_sum = window_sum;\n    for (int i = k; i < n; i++) {\n        window_sum += arr[i] - arr[i-k];\n        if (window_sum > max_sum) {\n            max_sum = window_sum;\n        }\n    }\n    return max_sum;\n}\n"}]}],"\n",["$","p","p-34",{"children":["$","strong","strong-0",{"children":"Template: Variable-Size Sliding Window (Subarray Sum equals Target)"}]}],"\n",["$","pre","pre-34",{"children":["$","code","code-0",{"className":"language-c","children":"int subarraySum(int arr[], int n, int target) {\n    int left = 0, sum = 0, count = 0;\n    for (int right = 0; right < n; right++) {\n        sum += arr[right];\n        while (sum > target && left <= right) {\n            sum -= arr[left];\n            left++;\n        }\n        if (sum == target) {\n            count++;\n        }\n    }\n    return count;\n}\n"}]}],"\n",["$","h2","h2-12",{"children":"Two Pointer Technique"}],"\n",["$","p","p-35",{"children":["$","strong","strong-0",{"children":"Template: Two Pointers from Ends (Sum equals Target)"}]}],"\n",["$","pre","pre-35",{"children":["$","code","code-0",{"className":"language-c","children":"int twoSum(int arr[], int n, int target) {\n    int left = 0, right = n - 1;\n    while (left < right) {\n        int sum = arr[left] + arr[right];\n        if (sum == target) {\n            return 1; // found\n        }\n        if (sum < target) left++;\n        else right--;\n    }\n    return 0;\n}\n"}]}],"\n",["$","p","p-36",{"children":["$","strong","strong-0",{"children":"Template: Two Pointers One Slow, One Fast (Remove Duplicates)"}]}],"\n",["$","pre","pre-36",{"children":["$","code","code-0",{"className":"language-c","children":"int removeDuplicates(int arr[], int n) {\n    if (n == 0) return 0;\n    int i = 0;\n    for (int j = 1; j < n; j++) {\n        if (arr[j] != arr[i]) {\n            i++;\n            arr[i] = arr[j];\n        }\n    }\n    return i + 1;\n}\n"}]}],"\n",["$","h2","h2-13",{"children":"Dynamic Programming (1D and 2D)"}],"\n",["$","p","p-37",{"children":["$","strong","strong-0",{"children":"Template: 1D DP (Fibonacci Tabulation)"}]}],"\n",["$","pre","pre-37",{"children":["$","code","code-0",{"className":"language-c","children":"int fibDP(int n) {\n    if (n <= 1) return n;\n    int dp[n+1];\n    dp[0] = 0;\n    dp[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        dp[i] = dp[i-1] + dp[i-2];\n    }\n    return dp[n];\n}\n"}]}],"\n",["$","p","p-38",{"children":["$","strong","strong-0",{"children":"Template: 1D DP (Fibonacci Memoization)"}]}],"\n",["$","pre","pre-38",{"children":["$","code","code-0",{"className":"language-c","children":"int fibMemo(int n, int dp[]) {\n    if (dp[n] != -1) return dp[n];\n    if (n <= 1) dp[n] = n;\n    else dp[n] = fibMemo(n-1, dp) + fibMemo(n-2, dp);\n    return dp[n];\n}\n"}]}],"\n",["$","p","p-39",{"children":["$","strong","strong-0",{"children":"Template: 2D DP (Grid Minimum Path Sum)"}]}],"\n",["$","pre","pre-39",{"children":["$","code","code-0",{"className":"language-c","children":"int minPathSum(int grid[][100], int m, int n) {\n    int dp[100][100];\n    dp[0][0] = grid[0][0];\n    for (int i = 1; i < m; i++) {\n        dp[i][0] = dp[i-1][0] + grid[i][0];\n    }\n    for (int j = 1; j < n; j++) {\n        dp[0][j] = dp[0][j-1] + grid[0][j];\n    }\n    for (int i = 1; i < m; i++) {\n        for (int j = 1; j < n; j++) {\n            int up = dp[i-1][j];\n            int left = dp[i][j-1];\n            dp[i][j] = grid[i][j] + (up < left ? up : left);\n        }\n    }\n    return dp[m-1][n-1];\n}\n"}]}]]}]]}]]}]}],["$","footer",null,{"className":"bg-muted/50 py-12","children":["$","div",null,{"className":"container mx-auto px-4","children":["$","div",null,{"className":"flex flex-col md:flex-row justify-between items-center","children":[["$","div",null,{"className":"mb-6 md:mb-0","children":[["$","$L3",null,{"href":"/","className":"text-xl font-bold tracking-tight","children":"Matthieu GUYOT"}],["$","p",null,{"className":"text-muted-foreground mt-2 max-w-md","children":"Building the future with code and security. Passionate about technology, cybersecurity, and knowledge sharing."}]]}],["$","div",null,{"className":"flex flex-col items-center md:items-end","children":[["$","div",null,{"className":"flex space-x-4 mb-4","children":[["$","a",null,{"href":"https://github.com/Nearuppp","target":"_blank","rel":"noopener noreferrer","aria-label":"GitHub","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-github h-5 w-5","children":[["$","path","tonef",{"d":"M15 22v-4a4.8 4.8 0 0 0-1-3.5c3 0 6-2 6-5.5.08-1.25-.27-2.48-1-3.5.28-1.15.28-2.35 0-3.5 0 0-1 0-3 1.5-2.64-.5-5.36-.5-8 0C6 2 5 2 5 2c-.3 1.15-.3 2.35 0 3.5A5.403 5.403 0 0 0 4 9c0 3.5 3 5.5 6 5.5-.39.49-.68 1.05-.85 1.65-.17.6-.22 1.23-.15 1.85v4"}],["$","path","9comsn",{"d":"M9 18c-4.51 2-5-2-7-2"}],"$undefined"]}],"className":"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 w-10 rounded-full hover:bg-primary/10 hover:text-primary"}],["$","a",null,{"href":"https://www.linkedin.com/in/3-100matthieuguyot/","target":"_blank","rel":"noopener noreferrer","aria-label":"LinkedIn","children":["$","svg",null,{"xmlns":"http://www.w3.org/2000/svg","width":24,"height":24,"viewBox":"0 0 24 24","fill":"none","stroke":"currentColor","strokeWidth":2,"strokeLinecap":"round","strokeLinejoin":"round","className":"lucide lucide-linkedin h-5 w-5","children":[["$","path","c2jq9f",{"d":"M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"}],["$","rect","mk3on5",{"width":"4","height":"12","x":"2","y":"9"}],["$","circle","bt5ra8",{"cx":"4","cy":"4","r":"2"}],"$undefined"]}],"className":"inline-flex items-center justify-center gap-2 whitespace-nowrap text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 h-10 w-10 rounded-full hover:bg-primary/10 hover:text-primary"}]]}],["$","p",null,{"className":"text-sm text-muted-foreground","children":["© ",2025," Matthieu GUYOT. All rights reserved."]}]]}]]}]}]}]]}],null],null],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","knowledge-hub","children","$5","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children","knowledge-hub","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/45f8aa93ae81327e.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":["$","body",null,{"className":"__className_e8ce0c","children":["$","$L7",null,{"attribute":"class","defaultTheme":"system","enableSystem":true,"disableTransitionOnChange":true,"children":["$","$L4",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L6",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]}]],null],null],["$L8",null]]]]
8:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"C Language Quick Reference for LeetCode Beginners | Matthieu GUYOT"}],["$","meta","3",{"name":"description","content":"Comprehensive C programming guide tailored for beginners practicing LeetCode problems, including arrays, pointers, linked lists, trees, recursion, sorting, dynamic programming, and more."}],["$","meta","4",{"name":"generator","content":"v0.dev"}],["$","meta","5",{"name":"next-size-adjust"}]]
1:null
