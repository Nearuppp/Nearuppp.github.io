<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Matthieu Guyot</title>
    <link>https://nearuppp.github.io/en/posts/</link>
    <description>Recent content in Posts on Matthieu Guyot</description>
    <generator>Hugo -- 0.129.0</generator>
    <language>en</language>
    <lastBuildDate>Thu, 30 May 2024 19:42:18 +0200</lastBuildDate>
    <atom:link href="https://nearuppp.github.io/en/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Math</title>
      <link>https://nearuppp.github.io/en/posts/math/</link>
      <pubDate>Thu, 30 May 2024 19:42:18 +0200</pubDate>
      <guid>https://nearuppp.github.io/en/posts/math/</guid>
      <description>This is a math post Mathlab This is a paragraph. about math</description>
    </item>
    <item>
      <title>Electronic</title>
      <link>https://nearuppp.github.io/en/posts/electronic/</link>
      <pubDate>Sun, 26 May 2024 12:00:00 +0000</pubDate>
      <guid>https://nearuppp.github.io/en/posts/electronic/</guid>
      <description>1. Conversion (Binary, Hexadecimal, etc.) Understanding number systems is crucial in the field of engineering, especially in computer science and electrical engineering. Here&amp;rsquo;s a brief overview of the different number systems and how to convert between them.
Binary to Decimal Binary numbers (base-2) use only 0 and 1. To convert binary to decimal (base-10), we sum the products of each bit and its corresponding power of 2. Those are the numbers to remember : 1 2 4 8 16 32 64 128 256</description>
    </item>
    <item>
      <title>Introduction to Rust</title>
      <link>https://nearuppp.github.io/en/posts/rust/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://nearuppp.github.io/en/posts/rust/</guid>
      <description>Rust Programming language Rust is a memory safe compiled programming language that delivers high level simplicity with low-level performances.
Rust does not have a garbage collector but achieves memory safety with a concept known as ownership and borrowing.</description>
    </item>
  </channel>
</rss>
